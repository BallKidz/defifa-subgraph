// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CrumbsWereSwept extends ethereum.Event {
  get params(): CrumbsWereSwept__Params {
    return new CrumbsWereSwept__Params(this);
  }
}

export class CrumbsWereSwept__Params {
  _event: CrumbsWereSwept;

  constructor(event: CrumbsWereSwept) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lpId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ethFeeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenFeeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class LunchWasServed extends ethereum.Event {
  get params(): LunchWasServed__Params {
    return new LunchWasServed__Params(this);
  }
}

export class LunchWasServed__Params {
  _event: LunchWasServed;

  constructor(event: LunchWasServed) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lpId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get projectBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ethBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class FairLunch__splitsResultValue0Struct extends ethereum.Tuple {
  get preferClaimed(): boolean {
    return this[0].toBoolean();
  }

  get preferAddToBalance(): boolean {
    return this[1].toBoolean();
  }

  get percent(): BigInt {
    return this[2].toBigInt();
  }

  get projectId(): BigInt {
    return this[3].toBigInt();
  }

  get beneficiary(): Address {
    return this[4].toAddress();
  }

  get lockedUntil(): BigInt {
    return this[5].toBigInt();
  }

  get allocator(): Address {
    return this[6].toAddress();
  }
}

export class FairLunch extends ethereum.SmartContract {
  static bind(address: Address): FairLunch {
    return new FairLunch("FairLunch", address);
  }

  codeOrigin(): Address {
    let result = super.call("codeOrigin", "codeOrigin():(address)", []);

    return result[0].toAddress();
  }

  try_codeOrigin(): ethereum.CallResult<Address> {
    let result = super.tryCall("codeOrigin", "codeOrigin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lpIdOf(param0: BigInt): BigInt {
    let result = super.call("lpIdOf", "lpIdOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lpIdOf(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lpIdOf", "lpIdOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpSupplyMultiplier(): BigInt {
    let result = super.call(
      "lpSupplyMultiplier",
      "lpSupplyMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lpSupplyMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lpSupplyMultiplier",
      "lpSupplyMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    _operator: Address,
    _from: Address,
    _tokenId: BigInt,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    _operator: Address,
    _from: Address,
    _tokenId: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  positionManager(): Address {
    let result = super.call(
      "positionManager",
      "positionManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_positionManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "positionManager",
      "positionManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  splits(): Array<FairLunch__splitsResultValue0Struct> {
    let result = super.call(
      "splits",
      "splits():((bool,bool,uint256,uint256,address,uint256,address)[])",
      []
    );

    return result[0].toTupleArray<FairLunch__splitsResultValue0Struct>();
  }

  try_splits(): ethereum.CallResult<
    Array<FairLunch__splitsResultValue0Struct>
  > {
    let result = super.tryCall(
      "splits",
      "splits():((bool,bool,uint256,uint256,address,uint256,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<FairLunch__splitsResultValue0Struct>()
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _positionManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get __weth(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetTheTableCall extends ethereum.Call {
  get inputs(): SetTheTableCall__Inputs {
    return new SetTheTableCall__Inputs(this);
  }

  get outputs(): SetTheTableCall__Outputs {
    return new SetTheTableCall__Outputs(this);
  }
}

export class SetTheTableCall__Inputs {
  _call: SetTheTableCall;

  constructor(call: SetTheTableCall) {
    this._call = call;
  }

  get _lpSupplyMultiplier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get __splits(): Array<SetTheTableCall__splitsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SetTheTableCall__splitsStruct
    >();
  }
}

export class SetTheTableCall__Outputs {
  _call: SetTheTableCall;

  constructor(call: SetTheTableCall) {
    this._call = call;
  }
}

export class SetTheTableCall__splitsStruct extends ethereum.Tuple {
  get preferClaimed(): boolean {
    return this[0].toBoolean();
  }

  get preferAddToBalance(): boolean {
    return this[1].toBoolean();
  }

  get percent(): BigInt {
    return this[2].toBigInt();
  }

  get projectId(): BigInt {
    return this[3].toBigInt();
  }

  get beneficiary(): Address {
    return this[4].toAddress();
  }

  get lockedUntil(): BigInt {
    return this[5].toBigInt();
  }

  get allocator(): Address {
    return this[6].toAddress();
  }
}

export class SweepCrumbsCall extends ethereum.Call {
  get inputs(): SweepCrumbsCall__Inputs {
    return new SweepCrumbsCall__Inputs(this);
  }

  get outputs(): SweepCrumbsCall__Outputs {
    return new SweepCrumbsCall__Outputs(this);
  }
}

export class SweepCrumbsCall__Inputs {
  _call: SweepCrumbsCall;

  constructor(call: SweepCrumbsCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SweepCrumbsCall__Outputs {
  _call: SweepCrumbsCall;

  constructor(call: SweepCrumbsCall) {
    this._call = call;
  }
}
