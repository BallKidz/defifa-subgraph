type Transfer @entity(immutable: true) {
  id: ID!
  from: Owner!
  to: Owner!
  token: Token!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Token @entity {
  id: ID!
  owner: Owner!
  uri: String
  number: BigInt!
  transfers: [Transfer!]! @derivedFrom(field: "token")
  metadata: TokenMetadata @derivedFrom(field: "token")
  contract: Contract!
  gameId: BigInt!
}

type TokenMetadata @entity {
  id: ID!
  token: Token!
  name: String
  identifier: BigInt
  description: String
  tags: [String!]
  image: String
}

type Owner @entity {
  id: ID!
  ownedTokens: [Token!]! @derivedFrom(field: "owner")
  balance: BigInt!
}

type Contract @entity {
  id: Bytes!
  address: Bytes!
  gameId: BigInt!
  creator: Bytes!
  tokenUriResolver: Bytes!
  name: String
  symbol: String
  totalSupply: BigInt!
  mintedTokens: [Token!]! @derivedFrom(field: "contract")
}

type Account @entity {
  id: Bytes!
  events: [Event!]! @derivedFrom(field: "emitter")
  scorecards: [Scorecard!]! @derivedFrom(field: "submitter")
}

type DefifaTierRedemptionWeight @entity {
  id: ID!
  redemptionWeight: BigInt!
  scorecard: Scorecard!
}

type Scorecard @entity {
  id: ID!
  gameId: ID!
  submitter: Account!
  tierWeights: [DefifaTierRedemptionWeight!]! @derivedFrom(field: "scorecard")
}

interface Event {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
}

type Transaction @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}
